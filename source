--ninja legends 2 gui

-- when a new update releases:
-- update shop tp position
-- update autosell
-- update all autobuys

if not _G.uiopen then

repeat wait() until game:IsLoaded()
local library = loadstring(game:HttpGet("https://pastebin.com/raw/guRsWGxe", true))()
--loadstring(game:HttpGet(('https://pastebin.com/raw/mnkZCLCL'),true))()	--fly
local ui = library:CreateWindow({text = "Ninja Legends 2"})
local pets = library:CreateWindow({text = "Pets"})
local tps = library:CreateWindow({text = "Teleports"})
local ui2 = library:CreateWindow({text = "Misc"})

local q1=false local q2=false local q3=false local q4=false local q5=false local q6=false local q7=false local q8=false local q9=false local q10=false
local q11=false local q12=false local q13=false local q14=false local q15=false local q16=false local q17=false local q18=false local q19=false local q20=false
local q21=false local q22=false local q23=false local q24=false local q25=false local q26=false local q27=false local q28=false local q29=false local q30=false
local q31=false local q32=false local q33=false local q34=false local q35=false local q36=false local q37=false local q38=false local q39=false local q40=false

_G.uiopen = true

function getRoot(char)
	local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
	return rootPart
end

local function FLY()

_G.FLYING = true

repeat wait() until game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name):FindFirstChild("HumanoidRootPart") ~= nil

local T = getRoot(game.Players.LocalPlayer.Character)

_G.BG = Instance.new('BodyGyro')
_G.BV = Instance.new('BodyVelocity')
_G.BG.P = 9e4
_G.BG.Parent = T
_G.BV.Parent = T
_G.BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
_G.BG.cframe = T.CFrame
_G.BV.velocity = Vector3.new(0, 0, 0)
_G.BV.maxForce = Vector3.new(9e9, 9e9, 9e9)

end

local function NOFLY()

_G.FLYING = false

repeat wait() until game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name):FindFirstChild("HumanoidRootPart") ~= nil

if _G.BV ~= nil and _G.BG ~= nil then

_G.BG:Destroy()
_G.BV:Destroy()

end

end

function checkBoss()
if game:GetService("Workspace").spawnedBosses:FindFirstChild("Elemental Cyborg") ~= nil then
return true
else
return false
end
end

--[[
local table1 = {}
for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui.Rebirths.Holder.Out.List()) do
if v:IsA("ImageLabel") then
local splitted = v:FindFirstChild("Amount").Text:split("(")
table.insert(table1,splitted[1])
end
end
--]]

--[[
ui:AddDropdown({unpack(table1)}, function(a)
_G.rebamount = a
print(_G.rebamount)
end)
--]]

ui:AddToggle("Auto-Swing", function()
if q1 == false then q1 = true

_G.autoswing = true while _G.autoswing == true do wait()
game:GetService("Players").LocalPlayer.saberEvent:FireServer("swingBlade")
end

else q1 = false
_G.autoswing = false
end
end)

ui:AddToggle("Auto-Sell", function()
if q5 == false then q5 = true

for i,v in pairs(game:GetService("Workspace").sellAreaCircles:GetChildren()) do
	if v.whichPlanet.Value == "Planet Chaos" then
		_G.sellcircle = v:FindFirstChild("circleInner")
		_G.SCogcframe = v:FindFirstChild("circleInner").CFrame
	end
end

_G.autosell = true while _G.autosell == true do wait()

if game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name):FindFirstChild("HumanoidRootPart") ~= nil then

_G.sellcircle.CFrame = game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name):FindFirstChild("HumanoidRootPart").CFrame
wait()
_G.sellcircle.CFrame = _G.SCogcframe

end
end

else q5 = false
_G.autosell = false
wait(.1)
_G.sellcircle.CFrame = _G.SCogcframe
end
end)

ui:AddToggle("Auto-Buy Blades", function()
if q2 == false then q2 = true

_G.autobuyblade = true while _G.autobuyblade == true do wait(.1)

local args = {
    [1] = "buyAllItems",
    [2] = {
        ["whichItems"] = "Swords",
        ["whichPlanet"] = "Planet Chaos"
    }
}

game:GetService("Players").LocalPlayer.saberEvent:FireServer(unpack(args))

end

else q2 = false
_G.autobuyblade = false
end
end)

ui:AddToggle("Auto-Buy Crystals", function()
if q3 == false then q3 = true

_G.autobuycrystal = true while _G.autobuycrystal == true do wait(.1)

local args = {
    [1] = "buyAllItems",
    [2] = {
        ["whichItems"] = "Crystals",
        ["whichPlanet"] = "Planet Chaos"
    }
}

game:GetService("Players").LocalPlayer.saberEvent:FireServer(unpack(args))

end

else q3 = false
_G.autobuycrystal = false
end
end)

ui:AddToggle("Auto-Buy Skills", function()
if q7 == false then q7 = true

_G.autobuyskills = true while _G.autobuyskills == true do wait(.5)

local args = {
    [1] = "buyAllItems",
    [2] = {
        ["whichItems"] = "Skills",
        ["whichPlanet"] = "Planet Chaos"
    }
}

game:GetService("Players").LocalPlayer.saberEvent:FireServer(unpack(args))

end

else q7 = false
_G.autobuyskills = false
end
end)

ui:AddToggle("Auto-Buy Powers", function()
if q18 == false then q18 = true

_G.autobuypower = true while _G.autobuypower == true do wait(.5)

local args = {
    [1] = "buyAllItems",
    [2] = {
        ["whichItems"] = "Powers",
        ["whichPlanet"] = "Planet Chaos"
    }
}

game:GetService("Players").LocalPlayer.saberEvent:FireServer(unpack(args))

end

else q18 = false
_G.autobuypower = false
end
end)

ui:AddToggle("Auto-Evolve", function()
if q8 == false then q8 = true

_G.autoevolve = true while _G.autoevolve == true do wait(.3)

for i,v in pairs(game:GetService("ReplicatedStorage").Evolutions.Ground:GetChildren()) do
    game:GetService("Players").LocalPlayer.saberEvent:FireServer("buyEvolution", v)
    wait()
end
end

else q8 = false
_G.autoevolve = false
end
end)

ui:AddToggle("Auto-Kill Boss", function()
if q17 == false then q17 = true

_G.autoboss = true while _G.autoboss == true do wait()

if checkBoss() and game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name):FindFirstChild("HumanoidRootPart") ~= nil and game:GetService("Workspace").spawnedBosses:FindFirstChild("Elemental Cyborg"):FindFirstChild("UpperTorso") ~= nil then

if _G.FLYING == false or _G.FLYING == nil then
	FLY()
end
	
	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").spawnedBosses["Elemental Cyborg"].UpperTorso.CFrame

if game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name):FindFirstChild("HumanoidRootPart") ~= nil then

for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
if v:IsA("Tool") and not v.Name:find("Blasts") then
game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
end
end

end

if game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name):FindFirstChild("HumanoidRootPart") ~= nil then

for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
   if v.Name:find("Blasts") then
   game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
end
end

end


local args = {
    [1] = "energyBlast",
    [2] = {
        ["whichHand"] = "rightHand",
        ["destination"] = game:GetService("Workspace").spawnedBosses["Elemental Cyborg"].UpperTorso.Position
    }
}

game:GetService("Players").LocalPlayer.saberEvent:FireServer(unpack(args))

else

if _G.FLYING == true then
	NOFLY()
end

end

if game:GetService("Workspace").bossArenas["Elemental Cyborg"]:FindFirstChild("tokenPart") then
for i,v in pairs(game:GetService("Workspace").bossArenas["Elemental Cyborg"].tokenPart.whichPlayers:GetChildren()) do
if v.Name == game.Players.LocalPlayer.Name then

print("token spawned")

local args = {
    [1] = "collectToken",
    [2] = {
        ["serverTokenPart"] = workspace.bossArenas["Elemental Cyborg"].tokenPart
    }
}

game:GetService("ReplicatedStorage").rEvents.tokenEvent:FireServer(unpack(args))

print("token collected")

end
end
end

end

else q17 = false
_G.autoboss = false
wait(.2)
NOFLY()
end
end)

ui:AddToggle("Auto-Take Bad Karma", function()
if q19 == false then q19 = true

_G.badkarma = true while _G.badkarma == true do wait(.1)

for i,v in pairs(game:GetService("Workspace").soulPartsFolder:GetChildren()) do
    
if not v:FindFirstChild("isGoodKarma") and v.collectPlayers:FindFirstChildOfClass("BoolValue").Name == game.Players.LocalPlayer.Name and not v:FindFirstChild("collected") then
--print("bad karma")

if game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name):FindFirstChild("HumanoidRootPart") ~= nil then
local pos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame

repeat wait()

game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
wait()
game:GetService("Players").LocalPlayer.saberEvent:FireServer("collectSoul",v)
until v:FindFirstChild("collected")


game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos

end
end
end
end

else q19 = false
_G.badkarma = false
end
end)

ui:AddToggle("Auto-Take Good Karma", function()
if q20 == false then q20 = true

_G.goodkarma = true while _G.goodkarma == true do wait(.1)

for i,v in pairs(game:GetService("Workspace").soulPartsFolder:GetChildren()) do
    
if v:FindFirstChild("isGoodKarma") and v.collectPlayers:FindFirstChildOfClass("BoolValue").Name == game.Players.LocalPlayer.Name and not v:FindFirstChild("collected") then
--print("good karma")

if game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name):FindFirstChild("HumanoidRootPart") ~= nil then
local pos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame

repeat wait()

game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
wait()
game:GetService("Players").LocalPlayer.saberEvent:FireServer("collectSoul",v)
until v:FindFirstChild("collected")


game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos

end
end
end
end

else q20 = false
_G.goodkarma = false
end
end)

pets:AddToggle("Auto-Evolve Pets", function()
if q4 == false then q4 = true

_G.autoevopets = true while _G.autoevopets == true do wait(.1)

game:GetService("ReplicatedStorage").rEvents.autoEvolveRemote:InvokeServer("autoEvolvePets")

end

else q4 = false
_G.autoevopets = false
end
end)

local table999 = {}
table.insert(table999,"Select an orb")
for i,v in pairs(game:GetService("Workspace").petOrbs:GetChildren()) do 
table.insert(table999,v.Name)
end

local table9999 = {}
table.insert(table9999,"Select how many to open")
table.insert(table9999,"1")
table.insert(table9999,"3")

pets:AddToggle("Auto-Open Orb", function()
if q11 == false then q11 = true

_G.auto_open_orb = true while _G.auto_open_orb == true do wait()

game:GetService("ReplicatedStorage").rEvents.openOrbRemote:InvokeServer("openOrb",_G.petorb,_G.quantity)

end

else q11 = false
_G.auto_open_orb = false
end
end)

pets:AddDropdown({unpack(table999)}, function(open1)

if open1 ~= "Select an orb" then
print(open1)
_G.petorb = game:GetService("Workspace").petOrbs[open1]
end

end)

pets:AddDropdown({unpack(table9999)}, function(open2)

if open2 == "Select how many to open" then
wait()

elseif open2 == "1" then
print(open2)
_G.quantity = false

elseif open2 == "3" then
print(open2)
_G.quantity = true

end
end)

local table1 = {}
table.insert(table1,"Select an orb")
for i,v in pairs(game:GetService("Workspace").petOrbs:GetChildren()) do 
table.insert(table1,v.Name)
end

local table2 = {}
table.insert(table2,"Select a planet")
for i,v in pairs(game:GetService("Workspace").planetOuters:GetChildren()) do 
table.insert(table2,v.Name)
end

local table3 = {}
table.insert(table3,"Select a training area")
for i,v in pairs(game:GetService("Workspace").trainingAreaParts:GetChildren()) do 
table.insert(table3,v.Name)
end

local table4 = {}
table.insert(table4,"Select a place")
table.insert(table4,"Volcano")
table.insert(table4,"Shop")
table.insert(table4,"Spawn")

local table5 = {}
table.insert(table5,"Select a NPC")
for i,v in pairs(game:GetService("Workspace").questsNpcs:GetChildren()) do
table.insert(table5,v.Name)
end

local table6 = {}
table.insert(table6,"Select a chest")
for i,v in pairs(game:GetService("Workspace").rewardChests:GetChildren()) do
table.insert(table6,v.Name)
end

tps:AddLabel("Orbs")

tps:AddDropdown({unpack(table1)}, function(tpto1)

if tpto1 ~= "Select an orb" then
print(tpto1)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").petOrbs[tpto1].camPosPart.CFrame
end

end)

tps:AddLabel("Planets")

tps:AddDropdown({unpack(table2)}, function(tpto2)

if tpto2 ~= "Select a planet" then
print(tpto2)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").planetOuters[tpto2].centerPart.CFrame
end

end)

tps:AddLabel("Training Areas")

tps:AddDropdown({unpack(table3)}, function(tpto3)

if tpto3 ~= "Select a training area" then
print(tpto3)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").trainingAreaParts[tpto3].trainingAreaPart.CFrame
end

end)

tps:AddLabel("Quest NPCs")

tps:AddDropdown({unpack(table5)}, function(tpto5)

if tpto5 ~= "Select a NPC" then
print(tpto5)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").questsNpcs[tpto5].camLookPart.CFrame
end

end)

tps:AddLabel("Chests")

tps:AddDropdown({unpack(table6)}, function(tpto6)

if tpto6 ~= "Select a chest" then
print(tpto6)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").rewardChests[tpto6].Chest.chestGuiPart.CFrame
end

end)

tps:AddLabel("Misc")


tps:AddDropdown({unpack(table4)}, function(tpto4)

if tpto4 == "Select a place" then
wait()

elseif tpto4 == "Volcano" then
print(tpto4)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-360.80368, 203.522781, 67.0120773)

elseif tpto4 == "Shop" then
print(tpto4)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(0.861174047, 8632.05176, 11.3696241)

elseif tpto4 == "Spawn" then
print(tpto4)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(39.9267349, 113.815819, 210.76384)

end
end)


_G.uicode = tostring(math.random(100000,900000000))
ui2:AddLabel(_G.uicode)
for _,l in pairs(game:GetService("CoreGui"):GetDescendants()) do 
if l:IsA("TextLabel") and l.Text == _G.uicode then 
_G.uiuiui = l.Parent.Parent.Parent
_G.uiuiui.DisplayOrder = 9999
l:Destroy()
end;end

--[[
ui2:AddToggle("Hide Purchase Prompts", function()
if q22 == false then q22 = true
game:GetService("CoreGui").PurchasePromptApp.PurchasePromptUI.Visible = false
else q22 = false
game:GetService("CoreGui").PurchasePromptApp.PurchasePromptUI.Visible = true
end
end)
--]]

ui2:AddButton("Collect All Chests", function()

local ctime = tick()

for i,v in pairs(game:GetService("Workspace").rewardChests:GetChildren()) do

local oldpos = v.chestAreaCircle.circleInner.CFrame

if game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name):FindFirstChild("HumanoidRootPart") ~= nil then
v.chestAreaCircle.circleInner.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
wait(1)
v.chestAreaCircle.circleInner.CFrame = oldpos
wait(4)
end

end
print("Collected all chests, took " .. tick()-ctime .. " seconds.")
end)

ui2:AddButton("Spin The Fortune Wheel", function()

local args = {
    [1] = "openFortuneWheel",
    [2] = workspace.FortuneWheels["Fortune Wheel"]
}

game:GetService("ReplicatedStorage").rEvents.openFortuneWheelRemote:InvokeServer(unpack(args))

end)

ui2:AddToggle("Auto-Start Quests", function()
if q16 == false then q16 = true

_G.autostart = true while _G.autostart == true do wait(.5)

--local ctime = tick()

	for i,v in pairs(game:GetService("ReplicatedStorage").Quests["Story Quests"]:GetChildren()) do
		for i2,v2 in pairs(v.Quests:GetChildren()) do
			if v2:IsA("Folder") then
				game:GetService("ReplicatedStorage").rEvents.questsEvent:FireServer("createNewStoryQuest",v2)
				wait()
			end
		end
	end
	--print("Started all quests, took " .. tick()-ctime .. " seconds.")
end

else q16 = false
_G.autostart = false
end
end)

ui2:AddToggle("Auto-Collect Quests", function()
if q15 == false then q15 = true

_G.autoquests = true while _G.autoquests == true do wait(.5)

for i,v in pairs(game:GetService("Players").LocalPlayer.Quests["Daily Quests"]:GetChildren()) do
	game:GetService("ReplicatedStorage").rEvents.questsEvent:FireServer("collectQuest",v)
	wait()
end

for i,v in pairs(game:GetService("Players").LocalPlayer.Quests["Weekly Quests"]:GetChildren()) do
	game:GetService("ReplicatedStorage").rEvents.questsEvent:FireServer("collectQuest",v)
	wait()
end

for i,v in pairs(game:GetService("Players").LocalPlayer.Quests["Story Quests"]:GetChildren()) do
	game:GetService("ReplicatedStorage").rEvents.questsEvent:FireServer("collectQuest",v:FindFirstChildOfClass("Folder"))
	wait()
end

end
--[[
local ctime = tick()

	for i,v in pairs(game:GetService("Players").LocalPlayer.Quests:GetChildren()) do
		for i2,v2 in pairs(v:GetChildren()) do
			if v2.Parent == "Story Quests" then
			
				game:GetService("ReplicatedStorage").rEvents.questsEvent:FireServer("collectQuest",v2:FindFirstChildOfClass("Folder"))
				
				elseif v2.Parent ~= "completedQuests" then
				
				game:GetService("ReplicatedStorage").rEvents.questsEvent:FireServer("collectQuest",v2)
				
				wait()
			end
		end
	end
	print("Collected all quests, took " .. tick()-ctime .. " seconds.")
--]]

else q15 = false
_G.autoquests = false
end
end)

ui2:AddToggle("Hide Pop-Ups", function()

if q13 == false then q13 = true

_G.hidepopup = true while _G.hidepopup == true do wait(1)

if game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name):FindFirstChild("HumanoidRootPart") ~= nil then

game:GetService("Players").LocalPlayer.PlayerGui.statEffectsGui.Enabled = false

end
end

--[[

for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.gameGui.maxElementMenu:GetChildren()) do
	if not v:IsA("UIAspectRatioConstraint") then
		v.Visible = not v.Visible
	end
end

if q6 == false then q6 = true
game:GetService("Players").LocalPlayer.PlayerGui.gameGui.maxElementMenu.ImageTransparency = 1

else q6 = false
game:GetService("Players").LocalPlayer.PlayerGui.gameGui.maxElementMenu.ImageTransparency = 0
end

--]]

else q13 = false

_G.hidepopup = false
wait(1.5)
game:GetService("Players").LocalPlayer.PlayerGui.statEffectsGui.Enabled = true

end
end)

ui2:AddToggle("Hide Floating Coins", function()

if q14 == false then q14 = true

_G.hidefloat = true while _G.hidefloat == true do wait(.2)

for i,v in pairs(game:GetService("Workspace").floatModelsFolder:GetChildren()) do
v:Destroy()
end

end

else q14 = false

_G.hidefloat = false

end
end)

ui2:AddToggle("Auto-Unlock All Planets", function()
if q12 == false then q12 = true

_G.unlockplanets = true while _G.unlockplanets == true do wait(.2)

	if #game:GetService("Players").LocalPlayer.foundPlanets:GetChildren() ~= #game:GetService("Workspace").planetOuters:GetChildren() then
		for i,v in pairs(game:GetService("Workspace").planetOuters:GetChildren()) do
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v:FindFirstChild("ForceField").CFrame
			wait(.3)
		end
	end
end

else q12 = false
_G.unlockplanets = false
end
end)

ui2:AddToggle("Spam Ground Slam", function()
if q9 == false then q9 = true

_G.groundslam = true while _G.groundslam == true do wait()
game:GetService("Players").LocalPlayer.saberEvent:FireServer("groundSlam")
end

else q9 = false
_G.groundslam = false
end
end)

ui2:AddToggle("Mute Annoying SFX", function()
if q10 == false then q10 = true

_G.mutesfx = true while _G.mutesfx == true do wait(.3)

if game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name):FindFirstChild("HumanoidRootPart") ~= nil then

game:GetService("Players").LocalPlayer.PlayerGui.statEffectsGui.statEffectsGui.coinSound.Volume = 0
game:GetService("Players").LocalPlayer.PlayerGui.statEffectsGui.statEffectsGui.tokenSound.Volume = 0

end
end

else q10 = false

_G.mutesfx = false

for i = 1,10 do wait(.1)
game:GetService("Players").LocalPlayer.PlayerGui.statEffectsGui.statEffectsGui.coinSound.Volume = 0.4
game:GetService("Players").LocalPlayer.PlayerGui.statEffectsGui.statEffectsGui.tokenSound.Volume = 0.6
end

end
end)

ui2:AddLabel(" ")

ui2:AddButton("Destroy Gui", function()
_G.uiopen = false
_G.uiuiui:Destroy()
end)

if not _G.ranonce then
loadstring(game:HttpGet("https://pastebin.com/raw/z5n4sD2E",true))()
_G.ranonce = true
else
_G.ranonce = true
end

game:GetService("Players").LocalPlayer.Idled:connect( --anti afk
   function()
       game:GetService("VirtualUser"):CaptureController()
       game:GetService("VirtualUser"):ClickButton2(Vector2.new())
   end
)

end --has to be here
